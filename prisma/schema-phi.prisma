// to-do: schema-phi.prisma
generator client {
  provider = "prisma-client-js"
  output = "../node_modules/@dreampipcom/db-phi/prisma-client"
}

datasource db {
  provider        = "mongodb"
  url             = env("PRISMA_PHI_URI")
  directUrl       = env("MONGODB_PHI_URI")
}

// Private Health Data
model BeHealth {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  heartRates        IHeartRates[]
  motions           IMotions[]

  workouts          DoMovements[]      @relation("beHealthWorkouts", fields: [workoutsIds], references: [id])
  workoutsIds       String[]        @db.ObjectId

  cardiograms       ICardiograms[]
  vitalSigns        ISmartScales[]

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner             User?              @relation("thoughtUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId           String?             @db.ObjectId

  communityOwner        Communities?             @relation("thoughtCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator           User?              @relation("thoughtUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId         String?             @db.ObjectId

  communityCreator      Communities?             @relation("thoughtCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beHealth")
}

model FeelSymptoms {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("moodUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("moodCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("moodUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("moodCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("feelLike")
}
