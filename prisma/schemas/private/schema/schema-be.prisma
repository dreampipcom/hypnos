// ---- Be: who are we? ----
//
// Profiles
// public visible profiles
model BeHumans {
  // @PUBLIC: IF MADE PUBLIC
  // admin
  communities
  emoji             String
  title             ILocaleString
  body              ILocaleString
  slug              String

  profilePictures   String[]
  coverPictures     String[]
  albumsPictures    String[]
  wallPictures      String[]

  profileVideos     String[]
  coverVideos       String[]
  albumsVideos      String[]
  wallVideos        String[]

  // invest
  fungibleWallets                     InvestWallets[]      @relation("beHumanFungibleWallets", fields: [fungibleWalletsIds], references: [id])
  fungibleWalletsIds                  String[]        @db.ObjectId

  nonFungibleWallets                  InvestWallets[]      @relation("beHumanNonFungibleWallets", fields: [nonFungibleWalletsIds], references: [id])
  nonFungibleWalletsIds               String[]        @db.ObjectId

  receivedCareEulogies                InvestCareEulogy[]      @relation("beHumanReceivedCareEulogies", fields: [receivedCareEulogiesIds], references: [id])
  receivedCareEulogiesIds             String[]        @db.ObjectId

  givenCareEulogies                   InvestCareEulogy[]      @relation("beHumanGivenCareEulogies", fields: [givenCareEulogiesIds], references: [id])
  givenCareEulogiesIds                String[]        @db.ObjectId

  receivedCareImprovementPlans        String[]
  givenCareImprovementPlans           String[]

  receivedCareImprovementPlans                 InvestCareImprovementPlan[]      @relation("beHumanReceivedCareImprovementPlans", fields: [receivedCareImprovementPlansIds], references: [id])
  receivedCareImprovementPlansIds              String[]        @db.ObjectId

  givenCareImprovementPlans                    InvestCareImprovementPlan[]      @relation("beHumanGivenCareImprovementPlans", fields: [givenCareImprovementPlansIds], references: [id])
  givenCareImprovementPlansIds                 String[]        @db.ObjectId
  
  // courtship
  likedTopics                     BeTopics[]      @relation("beHumanLikedTopics", fields: [likedTopicsIds], references: [id])
  likedTopicsIds                  String[]        @db.ObjectId

  dislikedTopics                  BeTopics[]      @relation("beHumanDislikedTopics", fields: [dislikedTopicsIds], references: [id])
  dislikedTopicsIds               String[]        @db.ObjectId

  cityBirth                       ILocation
  citiesResident                  ILocation[]

  dateBirth                       DateTime    
  timeBirth                       DateTime

  relationshipStatus              BeRelations?    @relation("beHumansRelationshipStatus", fields: [beHumansRelationshipStatusId], references: [id])
  relationshipStatusId            String?         @db.ObjectId

  
  // space
  workSpaces                     MakeSpaces[]    @relation("beHumanWorkSpaces", fields: [workSpacesIds], references: [id])
  workSpacesIds                  String[]        @db.ObjectId

  homeSpaces                     MakeSpaces[]    @relation("beHumanHomeSpaces", fields: [homeSpacesIds], references: [id])
  homeSpacesIds                  String[]        @db.ObjectId

  socialSpaces                   MakeSpaces[]    @relation("beHumanSocialSpaces", fields: [socialSpacesIds], references: [id])
  socialSpacesIds                String[]        @db.ObjectId

  // contact
  emailAdresses                   String[]
  facebookProfiles                String[]
  instagramProfiles               String[]
  linkedInProfiles                String[]
  xProfiles                       String[]
  mobileNumbers                   String[]
  landlines                       String[]
  websites                        String[]

  // messaging
  lettersSent                   BeLetters[]    @relation("beHumanLettersSent", fields: [lettersSentIds], references: [id])
  lettersSentIds                String[]        @db.ObjectId

  lettersReceived                   BeLetters[]    @relation("beHumanLettersReceived", fields: [lettersReceivedIds], references: [id])
  lettersReceivedIds                String[]        @db.ObjectId

  // make
  deals                   BeDeals[]    @relation("beHumanDeals", fields: [dealsIds], references: [id])
  dealsIds                String[]        @db.ObjectId 

  // hydrate decorations: 
  // sharedInventories
  // sharedListings
  inventories                   MakeInventories[]    @relation("beHumanInventories", fields: [inventoriesIds], references: [id])
  inventoriesIds                String[]        @db.ObjectId

  listings                   MakeListings[]    @relation("beHumanListings", fields: [listingsIds], references: [id])
  listingsIds                String[]        @db.ObjectId

  procurements                   MakeProcurements[]    @relation("beHumanProcurements", fields: [procurementsIds], references: [id])
  procurementsIds                String[]        @db.ObjectId

  quests                   DoQuests[]    @relation("beHumanQuests", fields: [questsIds], references: [id])
  questsIds                String[]        @db.ObjectId

  reports                   DoReports[]    @relation("beHumanReports", fields: [reportsIds], references: [id])
  reportsIds                String[]        @db.ObjectId

  dos                   Dos[]    @relation("beHumanDos", fields: [dosIds], references: [id])
  dosIds                String[]        @db.ObjectId

  // @PRIVATE
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  description       ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beHumansUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  userCreator       User?              @relation("beHumansUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  userManager       User?              @relation("beHumansUserCreator", fields: [userCreatorId], references: [id])
  userManagerId     String?             @db.ObjectId

  communityOwner        Communities?             @relation("beHumansCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  communityCreator      Communities?             @relation("beHumansCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  communityManager      Communities?             @relation("beHumansCommunityCreator", fields: [communityCreatorId], references: [id])
  communityManagerId    String?             @db.ObjectId

  @@map("beHumans")
}

// @dpip.cc
// main handle, aliases, creds? api? back auth?
model BeMailbox {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString
  aliases           String[]

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("thoughtUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("thoughtCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("thoughtUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("thoughtCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beMailbox")
}

// Messages
// public/private/users1toM/groups1toM
model BeLetters {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("actionUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("actionCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("actionUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("actionCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beLetters")
}

// Interests
// public/private/reusable/fixed-options/clean up eventually
model BeTopics {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("actionUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("actionCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("actionUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("actionCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beTopics")
}

// Fantasy
// public/private/re-usable/game/pip/goal
model BeCharacters {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("actionUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("actionCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("actionUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("actionCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beCharacters")
}