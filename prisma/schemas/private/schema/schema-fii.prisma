// to-do: schema-fii.prisma
// Welcome to FinCore. @â„¢
model Investments {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  placedOn          DateTime            @db.Date
  issuedOn          DateTime            @db.Date
  settledOn         DateTime            @db.Date

  ticker            Projects?           @relation("ticker", fields: [tickerId], references: [id])
  tickerId          String?             @db.ObjectId

  purchaseValue     Float
  settledValue      Float

  userOwner         User?              @relation("investmentUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("investmentCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("investmentUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("investmentCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("investments")
}

model InvestWallets {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  placedOn          DateTime            @db.Date
  issuedOn          DateTime            @db.Date
  settledOn         DateTime            @db.Date

  ticker            Projects?           @relation("ticker", fields: [tickerId], references: [id])
  tickerId          String?             @db.ObjectId

  purchaseValue     Float
  settledValue      Float

  userOwner         User?              @relation("investmentUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("investmentCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("investmentUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("investmentCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("investWallets")
}