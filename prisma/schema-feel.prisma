// to-do: schema-feel.prisma
generator client {
  provider = "prisma-client-js"
  output = "../node_modules/@dreampipcom/db-feel/prisma-client"
}

datasource db {
  provider        = "mongodb"
  url             = env("PRISMA_FEEL_URI")
  directUrl       = env("MONGODB_FEEL_URI")
}

// ---- Feel: what's happening? ----
// 
// Log

model FeelLike {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("moodUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("moodCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("moodUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("moodCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("feelLike")
}

model FeelDreams {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("moodUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("moodCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("moodUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("moodCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("feelDreams")
}

model FeelConfessions {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?               @relation("moodUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?    @relation("moodCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?         @db.ObjectId

  userCreator       User?               @relation("moodUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?    @relation("moodCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?         @db.ObjectId

  @@map("confessions")
}

model FeelMoods {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("moodUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("moodCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("moodUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("moodCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("feelMoods")
}

model FeelCravings {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("moodUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("moodCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("moodUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("moodCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("feelCravings")
}