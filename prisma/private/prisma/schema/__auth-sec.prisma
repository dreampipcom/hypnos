// to-do: __auth-sec.prisma
// ---- @PRIVATE: App Governance. ----
// 
// @auth stuff.
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken    String          @unique
  userId          String          @db.ObjectId
  expires         DateTime
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  mailboxes       BeMailboxes[]   @relation("beMailboxesActiveSession")
  mailboxesTokens String[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("session")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationToken")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
  @@map("authenticator")
}

// Email / Matrix / websocket Messages / Whatever
model Messages {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  description       ILocaleString

  type              EMessageType
  status            EMessageStatus
  nature            EMessageNature
  channels          EMessageChannel[]

  title             ILocaleString
  body              ILocaleString

  queuedOn          DateTime            @db.Date
  scheduledOn       DateTime            @db.Date
  sentOn            DateTime            @db.Date

  fromUser          User?              @relation("userMessagesSent", fields: [fromUserId], references: [id])
  fromUserId        String?              @db.ObjectId

  fromCommunity         Communities?             @relation("communityMessagesSent", fields: [fromCommunityId], references: [id])
  fromCommunityId       String?              @db.ObjectId

  toUser           User[]             @relation("userMessagesReceived", fields: [toUserIds], references: [id])
  toUserIds        String[]            @db.ObjectId

  toCommunities          Communities[]            @relation("communityMessagesReceived", fields: [toCommunitiesIds], references: [id])
  toCommunitiesIds       String[]            @db.ObjectId

  toListings        MakeListings[]          @relation("listingMessagesReceived", fields: [toCommunitiesIds], references: [id])
  toListingsIds     String[]            @db.ObjectId

  userOwner         User?              @relation("messageUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("messageCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("messageUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("messageCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("messages")
}

// Flux Auth: broad.
model Roles {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String?
  status            ERoleStatus
  type              ERoleType
  nature            ERoleNature

  abilities         Abilities[]         @relation("roleAbilities", fields: [abilitiesIds], references: [id])
  abilitiesIds      String[]            @db.ObjectId

  users             User[]         @relation("roles", fields: [usersIds], references: [id])
  usersIds          String[]        @db.ObjectId
  communities            Communities[]        @relation("communityRoles", fields: [communitiesIds], references: [id])
  communitiesIds         String[]        @db.ObjectId

  @@map("roles")
}

// Flux Auth: strict.
model Abilities {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  name                ILocaleString
  slug                String?
  status              EAbilityStatus
  type                EAbilityType
  nature              EAbilityNature
  target              String?
  action              String?

  features            Features[]        @relation("featureAbilities", fields: [featuresIds], references: [id])
  featuresIds         String[]          @db.ObjectId

  roles               Roles[]           @relation("roleAbilities", fields: [rolesIds], references: [id])
  rolesIds            String[]          @db.ObjectId

  users               User[]            @relation("userAbilities", fields: [usersIds], references: [id])
  usersIds            String[]          @db.ObjectId
  communities              Communities[]          @relation("communityAbilities", fields: [communitiesIds], references: [id])
  communitiesIds           String[]          @db.ObjectId

  userOwner           User?             @relation("abilityUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId         String?           @db.ObjectId

  communityOwner          Communities?           @relation("abilityCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId        String?           @db.ObjectId

  userCreator         User?             @relation("abilityUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId       String?           @db.ObjectId

  communityCreator        Communities?           @relation("abilityCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId      String?           @db.ObjectId

  @@map("abilities")
}

// Customer Enablement.
model Services {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                ILocaleString
  slug                String?
  status              EServiceStatus
  type                EServiceType
  nature              EServiceNature

  features            Features[]      @relation("serviceFeatures", fields: [featuresIds], references: [id])
  featuresIds         String[]        @db.ObjectId

  users               User[]          @relation("userServices", fields: [usersIds], references: [id])
  usersIds            String[]        @db.ObjectId
  communities              Communities[]        @relation("communityServices", fields: [communitiesIds], references: [id])
  communitiesIds           String[]        @db.ObjectId

  userOwner           User?           @relation("serviceUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId         String?         @db.ObjectId

  communityOwner          Communities?         @relation("serviceCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId        String?         @db.ObjectId

  userCreator         User?           @relation("serviceUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId       String?         @db.ObjectId

  communityCreator        Communities?         @relation("serviceCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId      String?         @db.ObjectId

  @@map("services")
}

// Feature Flags.
model Features {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                ILocaleString
  slug                String?
  status              EFeatureStatus
  type                EFeatureType
  nature              EFeatureNature

  services            Services[]      @relation("serviceFeatures", fields: [servicesIds], references: [id])
  servicesIds         String[]        @db.ObjectId

  abilities           Abilities[]      @relation("featureAbilities", fields: [abilitiesIds], references: [id])
  abilitiesIds        String[]        @db.ObjectId

  userOwner           User?           @relation("featureUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId         String?         @db.ObjectId

  communityOwner          Communities?         @relation("featureCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId        String?         @db.ObjectId

  userCreator         User?           @relation("featureUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId       String?         @db.ObjectId

  communityCreator        Communities?         @relation("featureCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId      String?         @db.ObjectId

  @@map("features")
}

// Settings
model Settings {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  vpns              IVPN[]

  userOwner         User?              @relation("settingsUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("settingsCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("settingsUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("settingsCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("Settings")
}

type IJWT {
  name    String
  value   String
}

type IVPN {
  vpnProxyUrl          String
  vpnProxyToken        IJWT
  vpnIPAllowList       String[]
}

// globals

type ILocaleString {
  es        String?
  ca        String?
  ga        String?
  eu        String?
  en        String?
  cy        String?
  mt        String?
  is        String?
  it        String?
  pt        String?
  de        String?
  fr        String?
  pl        String?
  et        String?
  cz        String?
  sv        String?
  da        String?
  nl        String?
  nb        String?
  nn        String?
  ro        String?
  sr        String?
  sl        String?
  lv        String?
  lt        String?
  hr        String?
  el        String?
  hu        String?
  bg        String?
  bs        String?
  sq        String?
  ja        String?
  ru        String?
  ar        String?
  he        String?
  zh        String?
  gl        String?
  sw        String?
  hi        String?
  ms        String?
  bn        String?
  pa        String?
  tr        String?
  fi        String?
  uk        String?
}

enum ERating {
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
}

enum EImpression {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum ECurrency {
  EUR
  NOK
  SEK
  CHF
  GBP
  CZK
  PLZ
  USD
}

enum ECadence {
  MINUTE
  HALF_HOUR
  HOURLY
  FOUR_HOURS
  EIGHT_HOURS
  TWELVE_HOURS
  DAILY
  TWO_DAYS
  THREE_DAYS
  WORK_DAYS
  WEEKENDS
  WEEKLY
  BI_WEEKLY
  MONTHLY
  BI_MONTHLY
  QUARTERLY
  BI_QUARTERLY
  SEMESTER
  YEARLY
  TWO_YEARS
  THREE_YEARS
  FIVE_YEARS
}


enum ECommunitiesStatus {
  PRIVATE
  INTERNAL
  PUBLIC
  DELETED
}

// taxonomies

enum ETaxonomyStatus {
  ACTIVE
  PENDING
  INACTIVE
  DELETED
}

enum ETaxonomyType {
  TAG
  ANOTHER_TAG
}

enum ETaxonomyNature {
  SEGMENTED
  PUBLIC
}


// offers

enum EOfferStatus {
  ACTIVE
  PENDING
  INACTIVE
  DELETED
}

type ITaxesAndFees {
  taxes       Float
  fees        Float
  shipping    Float
}

// communities

enum ECommunitiestatus {
  ACTIVE
  PENDING
  INACTIVE
  DELETED
}


// listing

enum EListingStatus {
  ACTIVE
  PENDING
  INACTIVE
  DELETED
}


// messages

enum EMessageType {
  ANNOUNCEMENT
  CAMPAIGN
  REVIEW
  CHAT
  SUPPORT
}

enum EMessageStatus {
  SCHEDULED
  PENDING
  DELIVERED
  VIEWED
}

enum EMessageNature {
  PRIVATE
  SEMI_PRIVATE
  PUBLIC
}

enum EMessageChannel {
  PUSH_NOTIFICATION
  EMAIL
  CHAT
  SUPPORT_PANEL
  Community_CHAT
}


// roles
enum ERoleStatus {
  ACTIVE
  PENDING
  INACTIVE
  DELETED
}

enum ERoleNature {
  INTERNAL
  PUBLIC
}

enum ERoleType {
  ADMIN
  USER
  Community
  CUSTOMER
  PROVIDER
  INTERNAL_DEV
  INTERNAL_MKT
  INTERNAL_SALES
  INTERNAL_HR
  INTERNAL_LEAD
  INTERNAL_OPS
}

enum ERoleAbilites {
  SUDO
  VIEW_PRIVATE
  EDIT_PRIVATE
  DELETE_PRIVATE
  CREATE_PRIVATE
  CREATE_MESSAGE
  CREATE_BROADCAST
  CREATE_LISTING
  MANAGE_TAXONOMIES
  MANAGE_Community
  MANAGE_USER
  MANAGE_REVIEWS
  MANAGE_ROLES
}

// services
enum EServiceStatus {
  ACTIVE
  INACTIVE
  DELINQUENT
}

enum EServiceNature {
  PRIVATE
  PUBLIC
  COMMON
}

enum EServiceType {
  COMMUNITY
  FINANCIAL
  CONSUMER
  MERCHANT
}

// features
enum EFeatureStatus {
  ACTIVE
  INACTIVE
  NIGHTLY
}

enum EFeatureNature {
  EXPERIMENTAL
  LTS
  LEGACY
}

enum EFeatureType {
  INTERFACE
  INTEGRATION
  EXPERIENCE
  PERFORMANCE
  SECURITY
}

// abilities
enum EAbilityStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum EAbilityNature {
  ROLE_BASED
  BILLING_BASED
  PRIVILEGE
  COMMON
  TEMPORARY
}

enum EAbilityType {
  C
  R
  U
  D
}

// users

type IPosix {
  lat    Float
  lng    Float
  radius Float
}

type IAddress {
  street         String
  additional     String
  number         String
  city           String
  province       String
  country        String
  zipCode        String
  phone          String
}

type ILocation {
  geo            IPosix?
  address        IAddress?
  name           String
}

type AbilitiesName {
  ar String?
  bn String?
  ca String?
  cz String?
  da String?
  de String?
  el String?
  en String?
  es String
  et String?
  eu String?
  fi String?
  fr String?
  gl String?
  he String?
  hi String?
  hu String?
  it String?
  ja String?
  ms String?
  nl String?
  pa String?
  pl String?
  pt String?
  ro String?
  ru String?
  sv String?
  sw String?
  tr String?
  uk String?
  zh String?
}

type FeaturesName {
  es String
}

type ListingsDescription {
  es String
}

type ListingsLocation {
  address ListingsLocationAddress
  geo     ListingsLocationGeo
  name    String
}

type ListingsLocationAddress {
  additional String
  city       String
  country    String
  number     String
  phone      String
  province   String
  street     String
  zipCode    String
}

type ListingsLocationGeo {
  lat    Float
  lng    Float
  radius Float
}

type ListingsTitle {
  es String
}

type MessagesBody {
  es String
}

type MessagesDescription {
  es String
}

type MessagesName {
  es String
}

type MessagesTitle {
  es String
}

type RolesName {
  es String
}

type ServicesName {
  ar String?
  bn String?
  ca String?
  cz String?
  da String?
  de String?
  el String?
  en String?
  es String
  et String?
  eu String?
  fi String?
  fr String?
  gl String?
  he String?
  hi String?
  hu String?
  it String?
  ja String?
  ms String?
  nl String?
  pa String?
  pl String?
  pt String?
  ro String?
  ru String?
  sv String?
  sw String?
  tr String?
  uk String?
  zh String?
}

type TaxonomiesDescription {
  es String
}

type TaxonomiesName {
  es String
}

type UserLocation {
  name String
}