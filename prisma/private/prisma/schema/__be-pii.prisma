// to-do: __be-pii.prisma
// ---- @PRIVATE: Be: Personal Data, Contact, etc. ----
// 
// Your personal profile.
model BeYou {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  slug              String
  description       ILocaleString
  title             ILocaleString
  body              ILocaleString
  handle            String

  legalFirstName    String?
  legalLastName     String?
  citizenships      ILocation[]
  fiscalResidencies ILocation?
  legalResidencies  ILocation?
  domiciles         ILocation?
  beAt              ILocation?

  contactProfiles                     BeContacts[]      @relation("beYouContactProfiles", fields: [contactProfilesIds], references: [id])
  contactProfilesIds                  String[]        @db.ObjectId
  
  lastContactProfile       BeContacts?              @relation("beYouLastContactProfile", fields: [lastContactProfileId], references: [id])
  lastContactProfileId     String?             @db.ObjectId

  preferredContactProfile       BeContacts?              @relation("beYouPreferredContactProfile", fields: [preferredContactProfileId], references: [id])
  preferredContactProfileId     String?             @db.ObjectId

  communities                     BeCommunities[]      @relation("beYouMembers", fields: [communitiesIds], references: [id])
  communitiesIds                  String[]        @db.ObjectId

  preferredCommunity       BeCommunities?              @relation("beYouPreferredCommunity", fields: [preferredCommunityId], references: [id])
  preferredCommunityId     String?             @db.ObjectId

  lastCommunity       BeCommunities?              @relation("beYouLastCommunity", fields: [lastCommunityId], references: [id])
  lastCommunityId     String?             @db.ObjectId

 // e.g. [Can Baro Tobacco Shop, Gracia, Genoa, Italy]
  movingFrom        ILocation[]
  movingWithin      ILocation[]
  movingTo          ILocation[]

  activeContracts                     InvestContracts[]      @relation("beYouActiveContracts", fields: [activeContractsIds], references: [id])
  activeContractsIds                  String[]        @db.ObjectId

  pendingContracts                     InvestContracts[]      @relation("beYouPendingContracts", fields: [pendingContractsIds], references: [id])
  pendingContractsIds                  String[]        @db.ObjectId

  finishedContracts                     InvestContracts[]      @relation("beYouFinishedContracts", fields: [finishedContractsIds], references: [id])
  finishedContractsIds                  String[]        @db.ObjectId

  // invest
  wallets                     InvestWallets[]      @relation("beYouWallets", fields: [walletsIds], references: [id])
  walletsIds                  String[]        @db.ObjectId

  // portfolios
  portfolios                     InvestPortfolios[]      @relation("beYouPortfolio", fields: [portfoliosIds], references: [id])
  portfoliosIds                  String[]        @db.ObjectId

  positions                InvestPositions[]      @relation("beYouPositions", fields: [positionsIds], references: [id])
  positionsIds             String[]        @db.ObjectId

  userOwner         User?              @relation("beYouUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beYouCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beYouUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beYouCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beYou")
}

// Your org profile.
model BeCommunities {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString
  handle            String

  legalName         String
  entityType        EEntityType
  
  fiscalResidencies ILocation[]
  legalResidencies  ILocation[]
  socialResidencies ILocation[]
  offices           ILocation[]

  socialRegistries  IRegisteredCompany[]

  members                     BeYou[]      @relation("beCommunitiesMembers", fields: [membersIds], references: [id])
  membersIds                  String[]        @db.ObjectId

  mailboxes                     BeMailboxes[]      @relation("beCommunitiesMailboxes", fields: [mailboxesIds], references: [id])
  mailboxesIds                  String[]        @db.ObjectId

  contactProfiles                     BeContacts[]      @relation("beCommunitiesContactProfiles", fields: [contactProfilesIds], references: [id])
  contactProfilesIds                  String[]        @db.ObjectId
  
  lastContactProfile       BeContacts?              @relation("beCommunitiesLastContactProfile", fields: [lastContactProfileId], references: [id])
  lastContactProfileId     String?             @db.ObjectId

  preferredContactProfile       BeContacts?              @relation("beCommunitiesPreferredContactProfile", fields: [preferredContactProfileId], references: [id])
  preferredContactProfileId     String?             @db.ObjectId

  activeContracts                     InvestContracts[]      @relation("beCommunitiesActiveContracts", fields: [activeContractsIds], references: [id])
  activeContractsIds                  String[]        @db.ObjectId

  pendingContracts                     InvestContracts[]      @relation("beCommunitiesPendingContracts", fields: [pendingContractsIds], references: [id])
  pendingContractsIds                  String[]        @db.ObjectId

  finishedContracts                     InvestContracts[]      @relation("beCommunitiesFinishedContracts", fields: [finishedContractsIds], references: [id])
  finishedContractsIds                  String[]        @db.ObjectId

  // invest
  wallets                     InvestWallets[]      @relation("beCommunitiesWallets", fields: [walletsIds], references: [id])
  walletsIds                  String[]        @db.ObjectId

  // portfolios
  portfolios                     InvestPortfolios[]      @relation("beCommunitiesPortfolio", fields: [portfoliosIds], references: [id])
  portfoliosIds                  String[]        @db.ObjectId

  positions                InvestPositions[]      @relation("beCommunitiesPositions", fields: [positionsIds], references: [id])
  positionsIds             String[]        @db.ObjectId

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beCommunitiesUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beCommunitiesCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beCommunitiesUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beCommunitiesCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beCommunities")
}

// Event / Calendar
model BeEvents {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString
  
  // .ics
  start             DateTime            @db.Date
  end               DateTime            @db.Date
  tzid              String
  tzname            String
  stamp             String
  freq              String
  until             DateTime            @db.Date
  sequence          Float
  summary           ILocaleString
  location          String
  organizer         String
  attendee          String[]
  attach            String
  url               String
  created           DateTime            @db.Date
  status            String
  published         DateTime            @db.Date

  userOwner         User?              @relation("beEventUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beEventCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beEventUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beEventCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beEvent")
}

model BeCalendars {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  caldavs           String[]
  googleCalendars   String[]
  type              ECalType

  syncStrategy      ESyncStrategy

  published         DateTime            @db.Date

  userOwner         User?              @relation("actionUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("actionCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("actionUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("actionCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beCalendar")
}

// Your friendships and customer data.
model BeContacts {
  emoji             String
  title             ILocaleString
  body              ILocaleString
  slug              String

  profilePictures   String[]
  coverPictures     String[]
  albumsPictures    String[]
  wallPictures      String[]

  profileVideos     String[]
  coverVideos       String[]
  albumsVideos      String[]
  wallVideos        String[]

  portfolios             InvestPortfolios[]      @relation("beContactPortfolios", fields: [portfoliosIds], references: [id])
  portfoliosIds             String[]        @db.ObjectId

  positions          InvestPositions[]      @relation("beContactsPositions", fields: [positionsIds], references: [id])
  positionsIds             String[]        @db.ObjectId

  // courtship
  givenGifts                     MakeItems[]      @relation("beContactsGivenGifts", fields: [givenGiftsIds], references: [id])
  givenGiftsIds                  String[]        @db.ObjectId

  receivedGifts                  MakeItems[]      @relation("beContactsReceivedGifts", fields: [receivedGiftsIds], references: [id])
  receivedGiftsIds                  String[]        @db.ObjectId

  likedTopics                     BeTopics[]      @relation("beContactsLikedTopics", fields: [likedTopicsIds], references: [id])
  likedTopicsIds                  String[]        @db.ObjectId

  dislikedTopics                  BeTopics[]      @relation("beContactsDislikedTopics", fields: [dislikedTopicsIds], references: [id])
  dislikedTopicsIds               String[]        @db.ObjectId

  cityBirth                       ILocation
  citiesResident                  ILocation[]

  dateBirth                       DateTime    
  timeBirth                       DateTime

  relationshipStatus              BeRelations?    @relation("beContactsRelationshipStatus", fields: [relationshipStatusId], references: [id])
  relationshipStatusId            String?         @db.ObjectId

  
  // space
  workSpaces                     MakeSpaces[]    @relation("beContactsWorkSpaces", fields: [workSpacesIds], references: [id])
  workSpacesIds                  String[]        @db.ObjectId

  homeSpaces                     MakeSpaces[]    @relation("beContactsHomeSpaces", fields: [homeSpacesIds], references: [id])
  homeSpacesIds                  String[]        @db.ObjectId

  socialSpaces                   MakeSpaces[]    @relation("beContactsSocialSpaces", fields: [socialSpacesIds], references: [id])
  socialSpacesIds                String[]        @db.ObjectId

  // contact
  emailAdresses                   String[]
  facebookProfiles                String[]
  instagramProfiles               String[]
  linkedInProfiles                String[]
  xProfiles                       String[]
  mobileNumbers                   String[]
  landlines                       String[]
  websites                        String[]

  // messaging
  lettersSent                   BeLetters[]    @relation("beContactsLettersSent", fields: [lettersSentIds], references: [id])
  lettersSentIds                String[]        @db.ObjectId

  lettersReceived                   BeLetters[]    @relation("beContactsLettersReceived", fields: [lettersReceivedIds], references: [id])
  lettersReceivedIds                String[]        @db.ObjectId

  // make
  deals                   BeDeals[]    @relation("beContactsDeals", fields: [dealsIds], references: [id])
  dealsIds                String[]        @db.ObjectId 

  // hydrate decorations: 
  // sharedInventories
  // sharedListings
  // sharedDos/Quests
  inventories                   MakeInventories[]    @relation("beContactsInventories", fields: [inventoriesIds], references: [id])
  inventoriesIds                String[]        @db.ObjectId

  listings                   MakeListings[]    @relation("beContactsListings", fields: [listingsIds], references: [id])
  listingsIds                String[]        @db.ObjectId

  procurements                   MakeProcurements[]    @relation("beContactsProcurements", fields: [procurementsIds], references: [id])
  procurementsIds                String[]        @db.ObjectId

  quests                   DoQuests[]    @relation("beContactsQuests", fields: [questsIds], references: [id])
  questsIds                String[]        @db.ObjectId

  reports                   DoReports[]    @relation("beContactsReports", fields: [reportsIds], references: [id])
  reportsIds                String[]        @db.ObjectId

  dos                   Dos[]    @relation("beContactsDos", fields: [dosIds], references: [id])
  dosIds                String[]        @db.ObjectId

  // @PRIVATE
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  description       ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beContactsUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  userCreator       User?              @relation("beContactsUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  userManager       User?              @relation("beContactsUserManager", fields: [userManagerId], references: [id])
  userManagerId     String?             @db.ObjectId

  communityOwner        Communities?             @relation("beContactsCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  communityCreator      Communities?             @relation("beContactsCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  communityManager      Communities?             @relation("beContactsCommunityManager", fields: [communityManagerId], references: [id])
  communityManagerId    String?             @db.ObjectId

  @@map("beContacts")
}

model BeRelations {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beRelationsUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beRelationsCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beRelationsUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beRelationsCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beRelations")
}

// @dpip.cc
// main handle, aliases, creds? api? back auth?
model BeMailboxes {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  aliases           String[]

  activeSession     Session?          @relation("beMailboxesActiveSession", fields: [mailActiveToken], references: [id])
  mailActiveToken   String? 

  caldavs                 String[]
  carddavs                String[]
  sambas                  String[]

  emailsSent              IEmail[]
  emailsReceived          IEmail[]
  emailsDrafts            IEmail[]

  transactionalEmails     IEmail[]
  importantEmails         IEmail[]
  doEmails                IEmail[]
  beEmails                IEmail[]
  feelEmails              IEmail[]
  writeEmails             IEmail[]
  makeEmails              IEmail[]
  investEmails            IEmail[]

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beMailboxesUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beMailboxesCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beMailboxesUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beMailboxesCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beMailbox")
}

// Your dating experience.
// We're soul seeking.
model BeCourtships {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beCourtshipsUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beCourtshipsCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beCourtshipsUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beCourtshipsCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beCourtships")
}

// Messaging
// We're chatting.
// public/private/users1toM/groups1toM
model BeLetters {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]          @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beLettersUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beLettersCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beLettersUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beLettersCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beLetters")
}

// Sales
// We're selling.
model BeDeals {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              ILocaleString
  slug              String
  description       ILocaleString

  title             ILocaleString
  body              ILocaleString

  loggedOn          DateTime            @db.Date
  loggedFor         DateTime[]            @db.Date
  publishedOn       DateTime            @db.Date

  userOwner         User?              @relation("beDealsUserOwner", fields: [userOwnerId], references: [id])
  userOwnerId       String?             @db.ObjectId

  communityOwner        Communities?             @relation("beDealsCommunityOwner", fields: [communityOwnerId], references: [id])
  communityOwnerId      String?             @db.ObjectId

  userCreator       User?              @relation("beDealsUserCreator", fields: [userCreatorId], references: [id])
  userCreatorId     String?             @db.ObjectId

  communityCreator      Communities?             @relation("beDealsCommunityCreator", fields: [communityCreatorId], references: [id])
  communityCreatorId    String?             @db.ObjectId

  @@map("beDeals")
}

type IEmail {
  title   String
  from    String
  to      String
  cc      String
  bcc     String
  body    String
  replyTo String
  context String
}

type ILegalData {
  name    String
  type    String
  content String
  photos  String[]
}

type IRegisteredCompany {
  name            String
  legalName       String
  legalAddress    ILocation
  fiscalAddress   ILocation
  offices         ILocation[]
  socialAddresses ILocation[]
  legalData       ILegalData[]
  otherLegalData  ILegalData[]
  socialProfile   String // BeCommunities @id
}

enum EEntityType {
  SolePersonal
  SolePropertor
  LLCSole
  LLCPartnership
  CorpSubsidiary
  CorpSociety
  CorpNonProfit
  CorpCulturalReligious
  Government
  Military
  International
}

enum ESyncStrategy {
  KEEP_LOCAL
  KEEP_CLOUD
  KEEP_BOTH
}

enum ECalType {
  CalDav
  GoogleCalendar
}